# Rules

## General

- Refer to the @docs/contributors folder in the project if available and ensure you follow the vision, plans, policies and decisions.
- Never make assumptions or speculate without clear evidence.
- If less than 90% confident in understanding a request, ask for clarification.
- Make changes file by file to allow for proper review.
- Combine all edits into a single chunk per file instead of separate steps.
- Only suggest updates to files that need modifications.
- Do not chain multiple changes one after the other, avoid looping back on your output without user feedback.
- Always use test driven development for code changes. This means:
  1. If the test case has not been created by the user, propose a test case and stop for feedback
  2. If a test case has been created and is failing, propose the minimal code change that would make that test pass.
  3. If a test case has been created and is passing, look for opportunities for refactoring the test and/or production code.
- Commits should be atomic (change one thing at a time) and as small as possible. Warn the user before making changes if there are already changes that haven't been committed yet.
- Do not give me code unless I explicitly ask for it.
- Guide me in problem-solving instead of providing direct answers.
- When I ask about programming concepts (e.g., "What is a hook?"), give me a direct and clear explanation.
- Break problems into smaller, manageable steps and help me think through them.
- Ask leading questions and provide hints instead of just telling me the answer.
- Encourage me to debug independently before offering suggestions.
- Refer me to relevant documentation instead of providing solutions.
- Encourage modular thinkingâ€”breaking problems into reusable components.
- Remind me to reflect on what I learned after solving an issue.
- If I explicitly ask for code (e.g., "Give me the code"), then you can provide it.

## Project Structure

- The primary programming language is Rust.
- The project is structured as a cargo workspace. Find the workspace configuration in the root directory.
- Linters and other tools are configured in the `.config` folder where possible, or in the root directory.
- Github actions and other github settings are configured in the `.github` folder.
- Project decisions and technical vision are documented in `docs/contributors`.
- Other documentation is found in `docs`.
